{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onMovieAdd","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","setMovie","_useState5","_useState6","hasError","setHasError","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","count","setCount","handleFind","event","preventDefault","prev","fetch","concat","then","res","json","catch","Response","Error","getMovie","response","Title","Plot","Poster","imdbID","finally","_Fragment","onSubmit","htmlFor","type","id","placeholder","cn","value","onChange","target","onClick","disabled","App","setMovies","some","m","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f76a350.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  // eslint-disable-next-line max-len\n  const DEFAULT_POSTER = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={movie.imgUrl !== 'N/A' ? movie.imgUrl : DEFAULT_POSTER}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">\n              {movie.title}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {movie.description}\n          <br />\n          <a href={movie.imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onMovieAdd: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ onMovieAdd }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [count, setCount] = useState(0);\n\n  const onQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setHasError(false);\n  };\n\n  const handleFind = (event: React.FormEvent) => {\n    event.preventDefault();\n    setCount(prev => prev + 1);\n    setIsLoading(true);\n    getMovie(query)\n      .then(response => {\n        if ('Error' in response) {\n          setHasError(true);\n        } else {\n          setMovie({\n            title: response.Title,\n            description: response.Plot,\n            imgUrl: response.Poster,\n            imdbUrl: `https://www.imdb.com/title/${response.imdbID}`,\n            imdbId: response.imdbID,\n          });\n        }\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleMovieAdd = () => {\n    setQuery('');\n    setHasError(false);\n    setCount(0);\n    onMovieAdd(movie as Movie);\n    setMovie(null);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleFind}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cn('input', { 'is-danger': hasError })}\n              value={query}\n              onChange={onQueryChange}\n            />\n          </div>\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button is-light',\n                { 'is-loading': isLoading },\n              )}\n              onClick={() => handleFind}\n              disabled={!query}\n            >\n              {count === 0 ? 'Find a movie' : 'Search again'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleMovieAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=6ece9238';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onMovieAdd = (movie: Movie) => {\n    if (!movies.some(m => m.imdbId === movie.imdbId)) {\n      setMovies([...movies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onMovieAdd={onMovieAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}